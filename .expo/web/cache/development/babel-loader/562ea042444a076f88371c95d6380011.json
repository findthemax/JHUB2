{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as FileSystem from 'expo-file-system';\nimport { insertExpense, fetchExpenses } from \"../helpers/db\";\nexport var ADD_EXPENSE = 'ADD_EXPENSE';\nexport var GET_EXPENSES = 'GET_EXPENSES';\nexport var addExpense = function addExpense(supplier, amount, date, image) {\n  amount = parseFloat(amount) * 100;\n  return function _callee(dispatch) {\n    var fileName, newPath, dbResult;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fileName = image.split('/').pop();\n            newPath = FileSystem.documentDirectory + fileName;\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(FileSystem.moveAsync({\n              from: image,\n              to: newPath\n            }));\n\n          case 5:\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(insertExpense(supplier, amount, date, newPath));\n\n          case 7:\n            dbResult = _context.sent;\n            console.log(dbResult);\n            dispatch({\n              type: ADD_EXPENSE,\n              id: dbResult.insertId,\n              supplier: supplier,\n              amount: amount,\n              date: date,\n              image: newPath\n            });\n            _context.next = 16;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](2);\n            console.log(_context.t0);\n            throw _context.t0;\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 12]], Promise);\n  };\n};\nexport var loadExpenses = function loadExpenses() {\n  return function _callee2(dispatch) {\n    var dbResult;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetchExpenses());\n\n          case 3:\n            dbResult = _context2.sent;\n            dispatch({\n              type: GET_EXPENSES,\n              expenses: dbResult.rows._array\n            });\n            _context2.next = 11;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n            throw _context2.t0;\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/maxwhite/WebstormProjects/ReactExpo/store/expenses-actions.js"],"names":["FileSystem","insertExpense","fetchExpenses","ADD_EXPENSE","GET_EXPENSES","addExpense","supplier","amount","date","image","parseFloat","dispatch","fileName","split","pop","newPath","documentDirectory","moveAsync","from","to","dbResult","console","log","type","id","insertId","loadExpenses","expenses","rows","_array"],"mappings":";AAAA,OAAO,KAAKA,UAAZ,MAA4B,kBAA5B;AACA,SAASC,aAAT,EAAwBC,aAAxB;AAEA,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAmC;AAEzDF,EAAAA,MAAM,GAAGG,UAAU,CAACH,MAAD,CAAV,GAAmB,GAA5B;AAEA,SAAO,iBAAMI,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,QADH,GACcH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,EADd;AAEGC,YAAAA,OAFH,GAEaf,UAAU,CAACgB,iBAAX,GAA+BJ,QAF5C;AAAA;AAAA;AAAA,6CAKOZ,UAAU,CAACiB,SAAX,CAAqB;AACvBC,cAAAA,IAAI,EAAET,KADiB;AAEvBU,cAAAA,EAAE,EAAEJ;AAFmB,aAArB,CALP;;AAAA;AAAA;AAAA,6CASwBd,aAAa,CAACK,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,EAAyBO,OAAzB,CATrC;;AAAA;AASOK,YAAAA,QATP;AAUCC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAT,YAAAA,QAAQ,CAAC;AAACY,cAAAA,IAAI,EAAEpB,WAAP;AAAoBqB,cAAAA,EAAE,EAAEJ,QAAQ,CAACK,QAAjC;AAA2CnB,cAAAA,QAAQ,EAARA,QAA3C;AAAqDC,cAAAA,MAAM,EAANA,MAArD;AAA6DC,cAAAA,IAAI,EAAJA,IAA7D;AAAmEC,cAAAA,KAAK,EAAEM;AAA1E,aAAD,CAAR;AAXD;AAAA;;AAAA;AAAA;AAAA;AAaCM,YAAAA,OAAO,CAACC,GAAR;AAbD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAiBH,CArBM;AAuBP,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO,kBAAMf,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEwBT,aAAa,EAFrC;;AAAA;AAEOkB,YAAAA,QAFP;AAGCT,YAAAA,QAAQ,CAAC;AAAEY,cAAAA,IAAI,EAAEnB,YAAR;AAAsBuB,cAAAA,QAAQ,EAAEP,QAAQ,CAACQ,IAAT,CAAcC;AAA9C,aAAD,CAAR;AAHD;AAAA;;AAAA;AAAA;AAAA;AAKCR,YAAAA,OAAO,CAACC,GAAR;AALD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AASH,CAVM","sourcesContent":["import * as FileSystem from 'expo-file-system';\nimport { insertExpense, fetchExpenses } from \"../helpers/db\";\n\nexport const ADD_EXPENSE = 'ADD_EXPENSE'\nexport const GET_EXPENSES = 'GET_EXPENSES'\n\nexport const addExpense = (supplier, amount, date, image) => {\n\n    amount = parseFloat(amount)*100\n\n    return async dispatch => {\n        const fileName = image.split('/').pop();\n        const newPath = FileSystem.documentDirectory + fileName;\n\n        try {\n            await FileSystem.moveAsync({\n                from: image,\n                to: newPath\n            })\n            const dbResult = await insertExpense(supplier, amount, date, newPath)\n            console.log(dbResult);\n            dispatch({type: ADD_EXPENSE, id: dbResult.insertId, supplier, amount, date, image: newPath})\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    }\n}\n\nexport const loadExpenses = () => {\n    return async dispatch => {\n        try {\n            const dbResult = await fetchExpenses();\n            dispatch({ type: GET_EXPENSES, expenses: dbResult.rows._array })\n        } catch (e) {\n            console.log(e);\n            throw e;\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}