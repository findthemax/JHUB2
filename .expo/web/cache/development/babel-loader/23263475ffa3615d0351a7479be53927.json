{"ast":null,"code":"import * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('expenses.db');\nexport var init = function init() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS expenses (id INTEGER PRIMARY KEY NOT NULL, supplier TEXT NOT NULL, amount INT NOT NULL, date TEXT NOT NULL, image TEXT NOT NULL)', [], function () {\n        resolve();\n      }, function (_, error) {\n        reject(error);\n      });\n    });\n  });\n  return promise;\n};\nexport var insertExpense = function insertExpense(supplier, amount, date, image) {\n  date = date.toString();\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO expenses (supplier, amount, date, image) VALUES (?, ?, ?, ?)', [supplier, amount, date, image], function (_, result) {\n        resolve(result);\n      }, function (_, error) {\n        reject(error);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchExpenses = function fetchExpenses() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM expenses', [], function (_, result) {\n        resolve(result);\n      }, function (_, error) {\n        reject(error);\n      });\n    });\n  });\n  return promise;\n};","map":{"version":3,"sources":["/Users/maxwhite/WebstormProjects/ReactExpo/helpers/db.js"],"names":["SQLite","db","openDatabase","init","promise","Promise","resolve","reject","transaction","tx","executeSql","_","error","insertExpense","supplier","amount","date","image","toString","result","fetchExpenses"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AAEA,IAAMC,EAAE,GAAGD,MAAM,CAACE,YAAP,CAAoB,aAApB,CAAX;AAEA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACtB,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACnBA,MAAAA,EAAE,CAACC,UAAH,CAAc,6JAAd,EACI,EADJ,EAEI,YAAM;AACFJ,QAAAA,OAAO;AACV,OAJL,EAKI,UAACK,CAAD,EAAIC,KAAJ,EAAc;AACVL,QAAAA,MAAM,CAACK,KAAD,CAAN;AACH,OAPL;AAQH,KATD;AAUH,GAXe,CAAhB;AAYA,SAAOR,OAAP;AACH,CAdM;AAgBP,OAAO,IAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAmC;AAC5DD,EAAAA,IAAI,GAAGA,IAAI,CAACE,QAAL,EAAP;AACA,MAAMd,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAAAC,EAAE,EAAI;AACjBA,MAAAA,EAAE,CAACC,UAAH,CAAc,0EAAd,EACI,CAACI,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,EAAyBC,KAAzB,CADJ,EAEI,UAACN,CAAD,EAAIQ,MAAJ,EAAe;AACXb,QAAAA,OAAO,CAACa,MAAD,CAAP;AACH,OAJL,EAKI,UAACR,CAAD,EAAIC,KAAJ,EAAc;AACVL,QAAAA,MAAM,CAACK,KAAD,CAAN;AACH,OAPL;AAQH,KATD;AAUH,GAXe,CAAhB;AAYA,SAAOR,OAAP;AACH,CAfM;AAiBP,OAAO,IAAMgB,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC/B,MAAMhB,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAAAC,EAAE,EAAI;AACjBA,MAAAA,EAAE,CAACC,UAAH,CAAc,wBAAd,EACI,EADJ,EAEI,UAACC,CAAD,EAAIQ,MAAJ,EAAe;AACXb,QAAAA,OAAO,CAACa,MAAD,CAAP;AACH,OAJL,EAKI,UAACR,CAAD,EAAIC,KAAJ,EAAc;AACVL,QAAAA,MAAM,CAACK,KAAD,CAAN;AACH,OAPL;AAQH,KATD;AAUH,GAXe,CAAhB;AAYA,SAAOR,OAAP;AACH,CAdM","sourcesContent":["import * as SQLite from 'expo-sqlite'\n\nconst db = SQLite.openDatabase('expenses.db')\n\nexport const init = () => {\n    const promise = new Promise((resolve, reject) => {\n        db.transaction((tx) => {\n            tx.executeSql('CREATE TABLE IF NOT EXISTS expenses (id INTEGER PRIMARY KEY NOT NULL, supplier TEXT NOT NULL, amount INT NOT NULL, date TEXT NOT NULL, image TEXT NOT NULL)',\n                [],\n                () => {\n                    resolve()\n                },\n                (_, error) => {\n                    reject(error)\n                })\n        })\n    })\n    return promise\n}\n\nexport const insertExpense = (supplier, amount, date, image) => {\n    date = date.toString()\n    const promise = new Promise((resolve, reject) => {\n        db.transaction(tx => {\n            tx.executeSql('INSERT INTO expenses (supplier, amount, date, image) VALUES (?, ?, ?, ?)',\n                [supplier, amount, date, image],\n                (_, result) => {\n                    resolve(result)\n                },\n                (_, error) => {\n                    reject(error)\n                })\n        })\n    })\n    return promise\n}\n\nexport const fetchExpenses = () => {\n    const promise = new Promise((resolve, reject) => {\n        db.transaction(tx => {\n            tx.executeSql('SELECT * FROM expenses',\n                [],\n                (_, result) => {\n                    resolve(result)\n                },\n                (_, error) => {\n                    reject(error)\n                })\n        })\n    })\n    return promise\n}"]},"metadata":{},"sourceType":"module"}